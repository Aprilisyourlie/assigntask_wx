package com.nju.assigntask.dao;

import com.nju.assigntask.entity.Divided;
import org.apache.ibatis.annotations.Mapper;
import org.springframework.stereotype.Repository;

import java.util.List;
@Mapper
@Repository
public interface DividedMapper {
    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table divided
     *
     * @mbg.generated
     */
    int deleteByPrimaryKey(Integer dividedid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table divided
     *
     * @mbg.generated
     */
    int insert(Divided record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table divided
     *
     * @mbg.generated
     */
    Divided selectByPrimaryKey(Integer dividedid);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table divided
     *
     * @mbg.generated
     */
    List<Divided> selectAll();

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table divided
     *
     * @mbg.generated
     */
    int updateByPrimaryKey(Divided record);

    /**
     * 插入算法分组
     */
//    int insertDivided(int releaseid,int inputid,String algname1,String algname2);
    int insertDivided(Divided divided);

    /**
     * 更新ifdivided字段
     * @param ifdivided
     * @param dividedId
     * @return
     */
    int updataDivided(String ifdivided,int dividedId);

    /**
     * 更新divided表的score
     * @param dividedid
     * @param socre1
     * @return
     */
    int updateScore1(int dividedid,double socre1);
    int updateScore2(int dividedid,double score2);
//    int updateScore1(Divided divided);
//    int updateScore2(Divided divided);

    /**
     * 更新ordered字段
     * @param divided
     */
    void updateOrdered(Divided divided);

    /**
     * 查找ifdivided字段
     * @param dividedId
     * @return
     */
    String findIfDivided(int dividedId);

    /**
     * 查询score1为空的dividedid
     * @return
     */
    List<Integer> selectNullScore1();

    /**
     * 查询score2为空的dividedid
     * @return
     */
    List<Integer> selectNullScore2();

    /**
     * 查询无序的divideid，针对算法内排序
     * @param releaseid
     * @return
     */
    List<Integer> selectNullOrdered(int releaseid);
    List<Integer> selectNullWinScore();//获取divided表中winscore=null的record

    /**
     * 根据releaseid和algname查找divided
     * @param releaseid
     * @param algname1
     * @param algname2
     * @return
     */
   Divided selectByReleaseAlgs(int releaseid,String algname1,String algname2);
//    List<Divided> selectByReleaseAlgs(Divided divided);
    int selectSumScore1(Divided divided);//根据releaseid、algname1、algname2查询
    int selectSumScore2(Divided divided);

    /**
     * 查询某次发布下的algname1:algname2的分数
     * @param releaseid
     * @param algname1
     * @param algname2
     * @return
     */
    List<Double> selectScore1Data(int releaseid,String algname1,String algname2);
    List<Double> selectScore2Data(int releaseid,String algname1,String algname2);

    /**
     * 查找符合条件的divided
     * @param releaseid
     * @param inputid
     * @param algname1
     * @param algname
     * @return
     */
    Divided selectByReelaseid(int releaseid,int inputid,String algname1,String algname);
}